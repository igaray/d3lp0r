% la consulta meta(X) te da la mejor meta
meta(expansion(X)) <- expansion(X).
meta(explorar(X)) <- explorar(X).

% con estas reglas, se define que sólo haya una meta sin derrotar
~explorar(_) <- expansion(_).
~expansion(_) <- explorar(_).

~expansion(Node) <- expansion(Node2),
                    notEqual(Node, Node2).
                    
~explorar(Node) <- explorar(Node2),
                   notEqual(Node, Node2).

                   
% DESIRE expansión(Nodo)
expansion(X) -< posibleExpansion(X),
                       estoyEnLaFrontera,
                       esSeguro(X),
                       aumentoFrontera(X, DifPuntos),
                       consExpansion(Cons),
                       mult(DifPuntos, Cons, Value),
                       argValue(Value).
                        
% ~expansion(_, Value) -< aumento(_, ValueD),
%                        greater(ValueD, Value).
                        
% ~aumento(_, Value) -< explorar(_, ValueD),
%                      greater(ValueD, Value).
                      
% ~aumento(_, Value) -< expansion(_, ValueD),
%                      greater(ValueD, Value).
                       
% ~explorar(_, Value) -< aumento(_, ValueD),
%                       greater(ValueD, Value).

               
% DESIRE explorar(Nodo)
explorar(X) -< posibleExplorar(X),
               ~estaLejos(X, Dist, 5),
               ~explored(X),
               estaCercaDeLaZona(X, DistZona),
               mult(DistZona, 10, Mult),
               sust(5, Dist, Sust),
               power(Sust, 2, Pow),
               add(Mult, Pow, Value),
               argValue(Value).
                      
% estaCercaDeLaZona(X, Dist) -< distanciaZona(X, Dist).
                      
% ~estaCercaDeLaZona(X, Dist) <- distanciaZona(X, Dist), 
                               % lessEqDist, 2).

~estaLejos(X, Dist, _) -< distancia(X, Dist).

estaLejos(X, Dist, Cota) <- distancia(X, Dist),
                            greater(Dist, Cota).
                            
% Esta es una manera de poner las constantes que van a afectar a los valores de argValue, para que estén en la misma escala. La otra es poner los números sueltos, como en explorar. No sé que decisión de diseño tomar.
consExpansion(10) <- true. % ni idea que Value tendrá

% este argumento sólo sirve para poner el argValue, para que lo busque el criterio de comparación greaterArgValue
argValue(_) <- true.

%%%%%%%%%%%%%%%%%%%%%%%%

