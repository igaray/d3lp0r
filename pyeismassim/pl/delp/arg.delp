
% DESIRE expansión(Nodo)
expansion(Value, X) -< 
    b(distancia(X, [], Dist, EnergyLeft)),
    esSeguro(X),
    b(difPuntosZona(X, DifPuntos)),
    phaseCoef(expansion, Coef),
    expansionValue(Dist, DifPuntos, EnergyLeft, Coef, Value).
                
expansionValue(Dist, DifPuntos, EnergyLeft, Coef, Value) :-
    Value is (round(log(DifPuntos) * 60) - Dist * 2 + EnergyLeft) * Coef.
                 
is_a_built_in(expansionValue(_Dist2, _DifPuntos2, _E, _Coef, _Value2)).
                 
% DESIRE explorar(Nodo)


explorar(Value, X) -< 
    b(distancia(X, [[survey]], Dist, EnergyLeft)),
    b(difPuntosZona(X, DifPuntos)),
    positivoONegativo(DifPuntos, Positivo, Negativo),
    phaseCoef(explorar, Coef),
    explorarValue(Dist, Positivo, Negativo, EnergyLeft, Coef, Value).
               
explorarValue(Dist, Positivo, Negativo, EnergyLeft, Coef, Value) :-
    Value is (20 + ((10 - Dist) ** 2) * 2 + Positivo - Negativo ** 2 + EnergyLeft) * Coef.

is_a_built_in(explorarValue(_Dist, _Positivo, _Negativo, _E, _Coef, _Value)).
    
positivoONegativo(DifPuntos, DifPuntos, 0) <- greaterEq(DifPuntos, 0).
positivoONegativo(DifPuntos, 0, DifPuntos) <- less(DifPuntos, 0).


% X instanciado con todos los nodos a distancia máxima 2 de la zona
aumento(Value, X) -< 
    b(distancia(X, [], Dist, EnergyLeft)),
    esSeguro(X),
    b(difPuntosZona(X, DifPuntos)),
    greater(DifPuntos, 0),
    phaseCoef(aumento, Coef),
    aumentoValue(Dist,  DifPuntos, EnergyLeft, Coef, Value).

aumentoValue(Dist,  DifPuntos, EnergyLeft, Coef, Value) :-
    Value is (DifPuntos * 10 + (10 - Dist) ** 2 + EnergyLeft) * Coef.
    
is_a_built_in(aumentoValue(_Dist3,  _DifPuntos3, _E, _Coef, _Value3)).
       
	   
auxilio(Value, Repairer) -<
	b(position(Repairer, Nodo)),
	b(maxHealth(Max)),
	b(health(Health)),
	b(difPointsWithoutMe(Points)),
	positivoONegativo(Points, _Positivo, Negativo),
	b(distancia(Nodo, [], Dist, EnergyLeft)),
	auxilioValue(Dist, EnergyLeft, Max, Health, Negativo, Value).
	
auxilioValue(Dist, EnergyLeft, Max, Health, Negativo, Value) :-
	Value is (20 - (20 * (Health/Max))) ** 2 - Dist + EnergyLeft - Negativo ** 2.
	
is_a_built_in(auxilioValue(_Dist, _EnergyLeft, _Max, _Health, _Negativo, _Value)).
	   
% DESIRE quedarse(Nodo)
quedarse(20, _) -< true.

~estoyEnLaFrontera -< true.

esSeguro(_) -< true.

phaseCoef(_, 1.0) -< true.
~phaseCoef(X, 1.0) <- phaseCoef(X, V), notEqual(V, 1.0).


phaseCoef(expansion, 0.8) <- phase(exploration).
phaseCoef(explorar,  1.2) <- phase(exploration).
phaseCoef(aumento,   0.8) <- phase(exploration).

b(difPuntosSinMi(0)) -< true.
~b(difPuntosSinMi(0)) <- 
	b(difPuntosSinMi(P)),
	notEqual(P, 0).
	
agentRolePoints(_, _R, 0) -< true.
	
~agentRolePoints(I, R, 0) <- 
	agentRolePoints(I, R, V),
	notEqual(V, 0).

%%%%%%%%%%%%%%%%%%%%%%%%
