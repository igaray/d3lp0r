
% DESIRE expansión(Nodo)
expansion(Value, X) -< 
    b(distancia(X, [], Dist, EnergyLeft)),
    esSeguro(X),
    b(difPuntosZona(X, DifPuntos)),
    expansionValue(Dist, DifPuntos, EnergyLeft, Value).
                
expansionValue(Dist, DifPuntos, EnergyLeft, Value) :-
    Value is round(log(DifPuntos) * 60) - Dist * 2 + EnergyLeft.
                 
is_a_built_in(expansionValue(_Dist2, _DifPuntos2, _E, _Value2)).
                 
% DESIRE explorar(Nodo)


explorar(Value, X) -< 
    b(distancia(X, [[survey]], Dist, EnergyLeft)),
    b(difPuntosZona(X, DifPuntos)),
    positivoONegativo(DifPuntos, Positivo, Negativo),
    explorarValue(Dist, Positivo, Negativo, EnergyLeft, Value).
               
explorarValue(Dist, Positivo, Negativo, EnergyLeft, Value) :-
    Value is 20 + ((10 - Dist) ** 2) * 2 + Positivo - Negativo ** 2 + EnergyLeft.

is_a_built_in(explorarValue(_Dist, _Positivo, _Negativo, _E, _Value)).
    
positivoONegativo(DifPuntos, DifPuntos, 0) <- greaterEq(DifPuntos, 0).
positivoONegativo(DifPuntos, 0, DifPuntos) <- less(DifPuntos, 0).


% X instanciado con todos los nodos a distancia máxima 2 de la zona
aumento(Value, X) -< 
    b(distancia(X, [], Dist, EnergyLeft)),
    esSeguro(X),
    b(difPuntosZona(X, DifPuntos)),
    greater(DifPuntos, 0),
    aumentoValue(Dist,  DifPuntos, EnergyLeft, Value).

aumentoValue(Dist,  DifPuntos, EnergyLeft, Value) :-
    Value is DifPuntos * 10 + (10 - Dist) ** 2 + EnergyLeft.
    
is_a_built_in(aumentoValue(_Dist3,  _DifPuntos3, _E, _Value3)).
       
% DESIRE quedarse(Nodo)
quedarse(20, _) -< true.

~estoyEnLaFrontera -< true.

esSeguro(_) -< true.


%%%%%%%%%%%%%%%%%%%%%%%%

% Para poner banderas
is_a_built_in(w(_)).

w(X) :- writeln(X).