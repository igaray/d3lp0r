[X] 1 conexion 
[X] 2 integracion python prolog
[ ] 3 delirar soluciones al problema
[X] 4 diseño arquitectonico agentes (bdi)
[ ] 5 diseño interno
[ ] 6 diseño de comunicacion entre agentes
[ ] 7 implementacion interna
[ ] 8 hablar de argumentacion uy como usarlo

Areas de interes segun Diego Martine:
    arquitectura
    criterio de compracion
    comunicacion entre agentes
    planning
    
TAREAS INMEDIATAS:
    [ ] escribir el documento a mandar
    [ ] implementar el compartido de percepciones
        - que pasa cuando tenes dos agentes, y los dos mandan toda su percepcion, y colision e.g. el health de cada uno?
          solo mandamos cosas comunes como la estructura del grafo y agentes enemigos, o interesa saber la energia/salud de los demas?
        - opcion 1: separar el resultado del parseo en una lista de cosas privadas y otras publicas
        - opcion 2: tagear cosas privadas con el nombre del agente
    [ ] implementar opcion 1
    [ ] incorporar la libreria del tucky para comunicacion entre agentes
    [ ] implementar la incorporacion de la informacion en la percepcion a la base de conocimiento
        la estructura del grafo se almacena con hechos
        los datos dinamicos de la percepcion se almacenan en un mapeo asociativo
        vertex/1.
        arc/2.
    [ ] mejorar la incorporacion de el conocimiento en la percepcion a la kb del agente
        pregunta: hecho unario con una lista, o conjunto de hechos individuales?
    [ ] hacer que el arco contemple el costo (incorporacion de surveyed edges a la kb)
    [ ] decidir como se va a guardar o generar la lista de adyacencia
        posibilidad: guardar tanto hechos separados para cada arco, como guardar el grafo como lista de adyacencia
    [ ] adaptar el codigo de dijkstra para generar los caminos mas cortos en python
    [ ] escribir la consulta para obtener desde prolog la lista de adyacencia
    [ ] decidir como se va a hacer para instanciar un agente de un determinado rol (como separar el codigo para cada rol)
    [ ] TODO: abstraer el codigo en la rama del if que ejecuta cuando el tipo de mensaje es action-request, para cada rol

    - determinar como se mapea la arquitectura propuesta del agente a llamadas, funciones, predicados, etc. (la idea basica esta en el codigo de la clase PrologAgent)
    - desarrollar estrategias generales de: expansion, defensa, ataque, compra
    - desarrollar estrategias particulares para los roles de saboteador, reparador, sentinela, inspector

Cosas interesantes a implementar:
    predicado is_frontier que identifica cuando un conjunto de nodos va a definir una frontera de una zona segun el algoritmo de coloreo
    predicado is_bottleneck que identifica cuando un nodo es un cuello de botello

PREGUNTAS:
    pregunta: que pasa si no hay suficiente plata para comprar algo?
    pregunta: como afecta el tema de las percepciones compartidas
    pregunta: que suposiciones se pueden hacer sobre composicion de equipo?
    pregunta: que pasa si el valor de auxtimeout es distinto para distintos equipos o distintos miembros de un equipo?

ESTRATEGIA:
    
    para cada 'area', exploracion, expansion, defensa, ataque, y compra, habra estrategias de equipo y estrategias de rol
    las estrategias de equipo son estrategias para cuando todo el equipo tiene una meta comun
        ejemplos: cuando todo el equipo explora, durante la fasa inicial vs la estrategia de exploracion de un explorador
                  cuando todos deciden defender una zona o nodo bajo ataque de otro equipo vs la estrategia de defensa de un sentinela

    LOGRO DE ACHIEVEMENTS

    EXPLORACION (equipo)
        una fase inicial de exploracion
        despues alternacion entre expansion, defensa, ataque y compra
        se sabe cuantos nodos hay en el grafo, la exploracion puede cortarse cuando se conocen todos los nodos / arcos (pensar)
        siempre conviene hacer el survey
        el explorador siempre tiene que hacer preferencia de probe
        a la hora de ir explorando lo que primero se va a hacer es mandar la accion tentativa al buffer de accion y luego argumentar con el resto de los agentes sobre la posicion a la que nos vamos a mover. Asi los agentes no se mueven al mismo nodo para exploracion, o si fuese el caso y decidieran moverse al mismo nodo hacerlo. De esta forma tendriamos que los agentes deciden un posible movimiento y debaten para ver si alguno tiene que cambiar de accion.

    EXPLORACION (explorador)
        Hacer probe del nodo en el que esta parado actualmente (si no se conoce el peso)
        Hacer probe (si es necesario) de un nodo que este controlado por nuestro o equipo (o bien, en una zona cercana) y no se conozca su peso.
        Si conoce un peso de un camino a un nodo que no tiene valor, ir a ese nodo con la intencion de hacerle probe.
        Si no conoce el peso de algun arco, pero los nodos cercanos ya fueron probeados, hacer un survey.
        Cuando ya se conoce la zona propia, tanto el valor de los arcos como de los nodos, se comienza a explorar en profundidad lugares desconocidos del mapa, como la zona de tu enemigo.
        Cuando se conoce la mayoría del mapa, quedarte a defender tu zona / patrullar.

    EXPANSION (equipo)
        si se identifica un nodo cuello de botella, definir una zona detras del nodo la cual se puede defender de manera facil
        puede haber un nodo vacio entre dos agentes para que se forme frontera

    DEFENSA (equipo)
        los agentes con capacidad defensiva son: reparador,saboteador,sentinela
        el explorador y el inspector pueden servir para definir zonas

    ATAQUE (equipo)
        si se identifica un nodo que es punto debil de una zona enemiga, atacarlo
        el unico agente que hay que considerar para ataque es el saboteador

    COMPRA (equipo)
        argumentar dentro de un agente y entre agentes si que se va a comprar y porque
        cuando conviene quedarse con la plata por puntaje o comprar algo?
        cuando conviene que lo compre un agente en lugar de otro?
        mientras quedan nodos sin probar, la plata deberia ir para la energia para los exploradores

    (explorador)
        [skip,goto,      survey,buy,recharge,probe]
    (inspector)
        [skip,goto,      survey,buy,recharge,inspect]
    (reparador)
        [skip,goto,parry,survey,buy,recharge,repair]
    (saboteador)
        [skip,goto,parry,survey,buy,recharge,attack]
    (sentinela)
        [skip,goto,parry,survey,buy,recharge]

ACTIONS
    skip:     0 cost
    recharge: increases energy 20%, result = succesful | failed (if attacked)
    attack:   succesful | failed (lack of energy) | parried | wrongParameter (wrong parameter)
    parry:    2 cost, result = succesful | useless
    goto:     variable cost, result = successful | failed (lack of energy) | wrongParameter
    probe:    1 cost, result = successful | failed (lack of energy)
    survey:   1 cost, result = successful | failed (lack of energy)
    inspect:  2 cost, result = successful | failed (lack of energy, attacked)
    buy:      2 cost, result = successful, failed (wrong role, lack of energy, attacked) | wrongParameter, parameters = battery | sensor | shield | sabotageDevice
    repair:   2 cost, result = successful | failed (no such agent, lack of energy) | wrongParameter

disabled agents (health = 0):
    goto, repair, skip, recharge

