= Technical Report

== Abstract

== Introduction

1. What was the motivation to participate in the contest?

    objectivo mas alla de participar y la experiencia era testear la integracion de las tecnologias que usamos
    python, prolog y delp
    mucho exito

2. What is the history of the team?
3. What is the name of your team?
4. How many developers and designers did you have?  At what level of education are your team members?
5. From which field of research do you come form?  Which work is related?

== System Analysis and Design

1. If some multi-agent system methodology such as Prometheus, O-MaSE, or Tropos was used, how did you use it? 
   If you did not what were the reasons?

   No multi-agent system methodology was used.

2. Is the solution based on the centralisation of coordination/information on a specific agent?
   Conversely if you plan a decentralised solution, which strategy do you plan to use?

   The solution follows a decentralised architecture in which agents run completely decoupled, sharing nothing.
   Percepts are communicated via a broadcast mechanism.
   Decision-making takes place individually

3. What is the communication strategy and how complex is it?

   Agents communicate their percepts to other agents via a broadcast mechanism implemented in a dedicate 'percept server'.
   Complexity is minimal, with push/pull mechanism/api/interface/?.

4. How are the following agent features considered/implemented: autonomy, proactiveness, reactiveness?

   autonomy: agents are completely autonomous, as the decision making process is executed individually by each agent, with no influence from team members other than what is communicated via percepts. 
   decision taken by an agent are influences solely by the current simulation state and the results previous decisions.
   -> apunta a que no requiere de intervencion humana para correr
   proactiveness: Our intention-based agents generate many possible desires in most of the turns, and selects the best they can find, given their knowledge of the world. They try to accomplish that intention, for several turns, until they finish, or they find another reason to stop, and recalculate their intention.
   reactiveness: In every turn, the obtained perception is used to decide which intention is going to be selected (when the agent hasn't got any), or it's used to decide whether it is necessary to carry on the actual intention, or recalculate it. This happens when the intention has been achieved (by the agent or other teammate), when it's no longer necessary, when something else may be more important to do, or when the agent is in danger.
    

5. Is the team a truly multi-agent system or rather a centralised system in disguise?

    cuac
    
    I swear! it's distributed! more than was actually needed! please stop asking :(

6. How much time (man hours) have you invested (approximately) for implementing your team?

    many many many many
    
    Over 9000!

7. Did you discuss the design and strategies of your agent team with other developers? 
   To which extent did your test your agents playing with other teams?
   
   We did speak with members of a team of the previous competition (The Argonauts), but just in an introductory way, since that was before we started.
   
   We didn't test out agents with any other team.

== Software Architecture

1. Which programming language did you use to implement the multi-agent system?

    The agent system was implemented using Python 2.7 and SWI Prolog 5.10.5. DeLP, a defeasible logic language, was used as a service within Prolog.
    Language integration was achieved using the pyswip library, to call Prolog from Python.

2. Did you use multi-agent programming languages? Why or why not to use a multi-agent programming language?

    No multi-agent programming languages/patforms/frameworks were used due to previous experience indicating a general lack of flexibilty, and a lack of familiarity on behalf of the development team.

3. How have you mapped the designed architecture (both multi-agent and individual agent architectures) to programming codes, 
   i.e., how did you implement specific agent-oriented concepts and designed artifacts using the programming language?

    Aca hay que poner como cada parte del dibujito original de leo a codigo.
    
    The perception is processed by the Python program, that parses the XML. Then, it sends it to the Percept Server, that also receives all the information sent by its teammates. This is a centralised server that every step merges all perceptions, and delivers them back to the agents.
    
    Now, with a more complete version of the world, the Python code asserts all the perception into Prolog, then querying it for the next action to be executed. 
    
    The Prolog part handles all the decision taking, argumentation, and planning. It returns the action binded to a variable to Python, that then generates with it an XML to be sent to the server.

4. Which development platforms and tools are used? How much time did you invest in learning those?

    Both Linux and the Windows operating system were used as development platforms, since the language runtimes chosen for implementation were portable. Some caveats were encountered however.
    
    We used git as our revision control system. In general, we did not spend much time in learning it, since some of us had already worked with it.

5. Which runtime platforms and tools (e.g. Jade, AgentScape, simply Java, ....) are used? How much time did you invest in learning those?

    Python and Prolog were well-known at the start of the project, and were chosen for precisely those reasons.

6. What features were missing in your language choice that would have facilitated your development task?

    Nada
    
    We also selected our languages for their flexibilty, in order to not have this problem.

7. What features of your programming language has simplified your development task?

    Python's amenity to rapid application development and 'batteries-included philosophy' facilitated implementing the communication layer to the MASSimg server, parsing of peceptions, rapid addition of planned features and bug correction.
    
    We made use of Prolog's declarate nature to model states of the world, and it also made more straightforward to implement search algorithms.

8. Which algorithms are used/implemented?

    Search algorithms, as Uniform Cost Search, and Depth First Search were implemented in Prolog.
    The zone-coloring algorithm was also implemented in Prolog.
    The implementation of Defeasible Logic Programming (DeLP) by the LIDIA was used for the deliberative process.

9. How did you distribute the agents on several machines? And if you did not please justify why.

    Initial plans were to distribute agents on several machines. Each agents runs as a separate process, and communicates with others via TCP sockets. After some experience agents were run on one machine. Having the choice was a benefit of the proposed design.

10. To which extend is the reasoning of your agents synchronized with the receive-percepts/send-action cycle?

    Reasoning takes place within the perceive-act cycle.

11. What part of the development was most difficult/complex? What kind of problems have you found and how are they solved?

    MANULON
    Seteo de beliefs.
    Tama√±o de la KB de los agentes.
    Sincronizacion.
    Optimizacion.
    
    The most difficult problems were related to optimization. Much of our time has been spent in reducing the complexity of our algorithms, and the times they are called.
    
    For the coloring algorithm, we added several improvements, for both optimization and correctness. In essence, since we only had a incomplete version of the full map in every step, we added the concept of "fog of war" to the agents, assuming always in a pessimistic way. 

    For both search algorithms, the Depth First Search and the Uniform Cost Search, we added conditions that could cut several branches, when they were expanding to unwanted nodes. This conditions were set by the caller, since they depend on the context of the problem.
    
    For the UCS, we first used a simple stack, implemented with a list, to keep track of the frontier, because of Prolog's inability to work with arrays, that would have allowed us to develop a heap data structure, to be used in a priority queue. Lately, we found a Prolog library that implemented this data structure, and the migration was pleasently straightforward.
    
    Finally, for this last algorithm also, we added an important optimization, that allowed us to call several times to it, with the virtual cost of only one call. It was done using memoization, and a more thoughtful invocation, 

12. How many lines of code did you write for your software?

    Total LOC is 5842. 
    
    "Infrastructure" : 
    "Reasoning" :

== Stategies, Details, and Statistics

1. What is the main strategy of your team?

    The main strategy of the team consists of detecting profitable zones from the explored vertices, and positioning the agents correctly to maintain, defend and expand the zones.

2. How does the overall team work together? (coordination, information sharing, ...)

    On each perceive/act cycle, agents receive the percept from the MASSim server, separate the information which will remain private and which will be shared. The public part of the percept is sent to the percept server, which performs a union of all percept and send the difference back to each agent. After receiving the joint percept, the agents enter a belief setting page, and later an argumentation phase.
    Once the agent's action has been determined by argumentation and planning, it is sent to the MASSim server.

3. How do your agents analyze the topology of the map? And how do they exploit their findings?

    Agents make no assumption about the map topology. 
    Agents will prefer higher valued nodes over lower ones.

4. How do your agents communicate with the server?

    Some functionality provided by the eismassim library was reimplemented in a connection library in python.

5. How do you implement the roles of the agents? Which strategies do the different roles implement?

    Agent recover their assigned role from the simulation start message, and 

6. How do you find good zones? How do you estimate the value of zones?

    If an agent is not being part of any zone, it tries to regroup with a partner. When a zone is formed, and the agent is part of it, for each potentally beneficial neighbor node, the agent calculates how much points would they win if it moves, and that information is used by the decision taking module.

7. How do you conquer zones? How do you defend zones if attacked? Do you attack zones?

    If the expansion intention explained in the previous answer is selected and carried on, then a new zone is implicitly conquered.

    Both attacking and defense are implicitly implemented. Sabouteurs attack enemies that are near, so they might attack them if they enter our team's zone, as well as when they are in their zone.

8. Can your agents change their behavior during runtime? If so, what triggers the changes?

    Our agents do not change their behavior during runtime.

9. What algorithm(s) do you use for agent path planning?

    Path planning is implemented with an Uniform Cost Search. What we tried to minimize was the amount of steps required to achieve the goal, rather than the spent energy. The returned result is the list of actions to be done, rather than the list of nodes.

10. How do you make use of the buying-mechanism?

    Agents followed a list of predefined buying actions, when the necessary amount of money was reached.

11. How important are achievements for your overall strategy?

    Our agents did not have achievements in consideration. However, they managed to achieve a significant number of them, since this behavior was implicitly implemented.

12. Do your agents have an explicit mental state?

    .

13. How do your agents communicate? And what do they communicate?

    They

14. How do you organize your agents? Do you use e.g. hierarchies? Is your organization implicit or explicit?

    NO

15. Is most of your agents‚Äô behavior emergent on and individual and team level?

    YES

16. If your agents perform some planning, how many steps do they plan ahead?

    The agents make plans as long as the selected intention requieres. This may sound excesive, but the possible goals were previously selected for their potential, taking in consideration their distance (in nodes, not in actions).

    However, plans are recalculated in every step. This decision was made taking in consideration the fact that in the steps that we do not need to 
    
== Conclusion

1. What have you learned from the participation in the contest?

    many many many many things

2. Which are the strong and weak points of the team?

3. How suitable was the chosen programming language, methodology, tools, and algorithms?

4. What can be improved in the context for next year?

5. Why did your team perform as it did? Why did the other teams perform better/worse than you did?

6. Which other research fields might be interested in the Multi-Agent Programming Contest?

7. How can the current scenario be optimized? How would those optimization pay off?

