% DESIRE expansión(Nodo)
expansion(Value, X) -< 
    b(distancia(X, [], Dist, EnergyLeft)),
    esSeguro(X),
    b(difPuntosZona(X, DifPuntos)),
    phaseCoef(expansion, Coef),
    expansionValue(Dist, DifPuntos, EnergyLeft, Coef, Value).

expansionValue(Dist, DifPuntos, EnergyLeft, Coef, Value) :-
    Value is (round(log(DifPuntos) * 60) - Dist * 2 + EnergyLeft) * Coef.
   
is_a_built_in(expansionValue(_Dist2, _DifPuntos2, _E, _Coef, _Value2)).
   
   
% DESIRE explorar(Nodo)
explorar(Value, X) -< 
    b(distancia(X, [[survey]], Dist, EnergyLeft)),
    less(Dist, 3),
    b(difPuntosZona(X, DifPuntos)),
    positivoONegativo(DifPuntos, Positivo, Negativo),
    phaseCoef(explorar, Coef),
    explorarValue(Dist, Positivo, Negativo, EnergyLeft, Coef, Value).

explorar(Value, X) -<
    b(distancia(X, [[survey]], Dist, EnergyLeft)),
    greaterEq(Dist, 3),
    b(difPuntosSinMi(DifPuntos)),
    positivoONegativo(DifPuntos, Positivo, Negativo),
    phaseCoef(explorar, Coef),
    explorarValue(Dist, Positivo, Negativo, EnergyLeft, Coef, Value).
               
explorarValue(Dist, Positivo, Negativo, EnergyLeft, Coef, Value) :-
    Value is (20 + ((10 - Dist) ** 2) * 2 + Positivo - Negativo ** 2 + EnergyLeft) * Coef.

is_a_built_in(explorarValue(_Dist, _Positivo, _Negativo, _E, _Coef, _Value)).
    
positivoONegativo(DifPuntos, DifPuntos, 0) <- greaterEq(DifPuntos, 0).
positivoONegativo(DifPuntos, 0, DifPuntos) <- less(DifPuntos, 0).

% DESIRE aumento
% X instanciado con todos los nodos a distancia máxima 2 de la zona
aumento(Value, X) -< 
    b(distancia(X, [], Dist, EnergyLeft)),
    esSeguro(X),
    b(difPuntosZona(X, DifPuntos)),
    greater(DifPuntos, 0),
    phaseCoef(aumento, Coef),
    aumentoValue(Dist,  DifPuntos, EnergyLeft, Coef, Value).

aumentoValue(Dist,  DifPuntos, EnergyLeft, Coef, Value) :-
    Value is (DifPuntos * 10 + (10 - Dist) ** 2 + EnergyLeft) * Coef.
    
is_a_built_in(aumentoValue(_Dist3,  _DifPuntos3, _E, _Coef, _Value3)).


% DESIRE reagruparse
reagruparse(Value) -< 
    b(distanciaAZona(DistaciaZona)),
	b(agentesEnZona(AgentesEnZona)),
    phaseCoef(reagruparse, Coef),
    reagruparseValue(DistaciaZona, AgentesEnZona, Coef, Value).

reagruparseValue(DistaciaZona, AgentesEnZona, Coef, Value) :-
    Value is (DistaciaZona * 12 + ((10 - AgentesEnZona) ** 2) * 3) * Coef. 
    
is_a_built_in(reagruparseValue(_DistaciaZona, _AgentesEnZona, _Coef, _Value)).	   

~reagruparse(_) <-
    b(distanciaAZona(0)).
    
% DESIRE auxilio (busqueda de reparador)
auxilio(Value, Repairer) -<
	position(Repairer, Nodo),
	myMaxHealth(Max),
	myHealth(Health),
	b(difPuntosSinMi(Points)),
	positivoONegativo(Points, _Positivo, Negativo),
	b(distancia(Nodo, [], Dist, EnergyLeft)),
	auxilioValue(Dist, EnergyLeft, Max, Health, Negativo, Value).
	
auxilioValue(Dist, EnergyLeft, Max, Health, Negativo, Value) :-
	Value is (20 - (20 * (Health/Max))) ** 2 - Dist + EnergyLeft - Negativo ** 2.
	
is_a_built_in(auxilioValue(_Dist, _EnergyLeft, _Max, _Health, _Negativo, _Value)).


% DESIRE defensaPropia
defensaPropia(1000, Node) -<
    myStatus(normal),    
    puedoHacerParry,
    myPosition(Node),
    haySaboteador(Node).

defensaPropia(Value, Node) -<
    myStatus(normal),    
    myPosition(MyPos),    
    haySaboteador(MyPos),
    b(difPuntosZona(Node, DifPuntos)),
    b(distancia(Node, [], Dist, EnergyLeft)),
    defensaPropiaValue(DifPuntos, Dist, EnergyLeft, Value).
    
defensaPropiaValue(DifPuntos, Dist, EnergyLeft, Value) :-
    Value is 1000 - (Dist - 1) * 200 + DifPuntos + EnergyLeft.
    
is_a_built_in(defensaPropiaValue(_DifPuntos, _Dist, _EnergyLeft, _Value)).
    
~bloquear(_) <- 
    myRole(saboteur).
    
puedoHacerParry -<
    myRole(repairer).
    
puedoHacerParry -<
    myRole(saboteur).
    
puedoHacerParry -<
    myRole(sentinel).
    
~puedoHacerParry <-
    myEnergy(Energy),
    less(Energy,2).
    

% DESIRE quedarse(Nodo)
quedarse(20, _) -< true.

quedarse(Value, _) -< 
    b(difPuntosSinMi(SinMi)),
    myName(Agent),
    agenteEnZona(Agent),
    quedarseValue(SinMi, Value).

~quedarse(_, _) -< comprar(_, _).

~quedarse(Value, _) <-
    quedarse(Value2, _),
    greater(Value2, Value).

quedarseValue(SinMi, Value) :-
   
    Value is -SinMi * 5.
    
is_a_built_in(quedarseValue(_SinMi, _Value)).


% DESIRE comprar
comprar(500, sabotageDevice) -<
	myRole(saboteur),
	puedoComprarHardcode(sabotageDevice).
    
comprar(500, shield) -<
	myRole(repairer),
	puedoComprarHardcode(shield).
    
% comprar(Value, sabotageDevice) -<
	% myRole(saboteur),
	% puedoComprar(sabotageDevice),
	% difMuertos(DifMuertos),
	% comprarValue(DifMuertos, Value).    
	
% comprarValue(DifMuertos, Value) :-
	% Value is 20 + (DifMuertos - 1.5).
	
% is_a_built_in(comprarValue(_DifMuertos, _)).	
 
% puedoComprar(shield) <-
	% myEnergy(Energy),
	% greaterEq(Energy, 2),
	% money(Money),
	% greaterEq(Money, 8),
	% currentStep(Step),
	% buyCount(shield, Count),
	% mult(100, Count, Mult),
	% sust(Step, Mult, Sust),
	% greater(Sust, 0).
    
% puedoComprar(sabotageDevice) <-
	% myEnergy(Energy),
	% greaterEq(Energy, 2),
	% money(Money),
	% greaterEq(Money, 8),
	% currentStep(Step),
	% buyCount(sabotageDevice, Count),
	% mult(100, Count, Mult),
	% sust(Step, Mult, Sust),
	% greater(Sust, 0).
    
puedoComprarHardcode(sabotageDevice) <-
	myEnergy(Energy),
	greaterEq(Energy, 2),
	money(Money),
	greaterEq(Money, 8),
	buyCount(sabotageDevice, Count),
	less(Count, 3).
    
puedoComprarHardcode(shield) <-
	myEnergy(Energy),
	greaterEq(Energy, 2),
	money(Money),
	greaterEq(Money, 8),
	buyCount(shield, Count),
	less(Count, 1).
	
difMuertos(DifMuertos) <-
	muertos(miEquipo, Muertos),
	greaterEq(Muertos, 5),
	muertos(enemigo, MuertosEnemigos),
	coefMuertos(Muertos, MuertosEnemigos, DifMuertos),
	greater(DifMuertos, 1.5).
	
coefMuertos(_Muertos, 0, 10) :-
	!.
	
coefMuertos(Muertos, MuertosEnemigos, DifMuertos) :-
	DifMuertos is Muertos / MuertosEnemigos.
	
is_a_built_in(coefMuertos(_Muertos, _MuertosEnemigos, _DifMuertos)).
	
~comprar(_, _) <- myStatus(disabled).	
	
is_a_built_in(muertos(_Team, _Count)).

~estoyEnLaFrontera -< true.

esSeguro(_) -< true.
~esSeguro(_) <- ~b(esSeguro).

~haySaboteador(_Position) -<  true.
haySaboteador(Position) <-  b(haySaboteador(Position)).
haySaboteador(Position) <-  
    myPosition(Position),
    mePegaron.

phaseCoef(_, 1.0) -< true.
~phaseCoef(X, 1.0) <- phaseCoef(X, V), notEqual(V, 1.0).

% b(difPuntosSinMi(0)) -< true.
% ~b(difPuntosSinMi(0)) <- 
	% b(difPuntosSinMi(P)),
	% notEqual(P, 0).
	
agentRolePoints(_, _R, 0) -< true.
	
~agentRolePoints(I, R, 0) <- 
	agentRolePoints(I, R, V),
	notEqual(V, 0).
